# -*- coding: utf-8 -*-
"""Resume.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ooiku6aX4TQvMZoLd-LwMrmYr6tm2UY4
"""

pip install reportlab

import gradio as gr
from datetime import datetime
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, ListFlowable, ListItem
from reportlab.lib.units import inch
import tempfile
# --- simple AI-style cover letter generator ---
def auto_cover_letter(name, position, experiences):
    exp_points = [e.strip() for e in experiences.split("\n") if e.strip()]
    exp_summary = ", ".join(exp_points[:2]) if exp_points else "gained hands-on experience as an intern"
    return (f"Dear Hiring Committee,\n\n"
            f"I am excited to apply for the position of {position}. "
            f"Over the past year, I have {exp_summary}. "
            f"These experiences have strengthened my technical and communication skills "
            f"and deepened my enthusiasm for {position}.\n\n"
            f"I am eager to bring my dedication, attention to detail, and collaborative mindset to your team. "
            f"Thank you for considering my application.\n\nSincerely,\n{name}")

def generate_resume_email(name, phone, email, position, skills_selected, custom_skills,
                          experiences, education, recipient_name, recipient_email):
    # Validation
    if not name or not email or not position:
        return "<p style='color:red;'>Please fill in at least Name, Email, and Position.</p>", "", None

    date_str = datetime.now().strftime("%B %d, %Y")

    # Merge skills from checkboxes + custom
    all_skills = skills_selected.copy() if skills_selected else []
    if custom_skills.strip():
        all_skills += [s.strip() for s in custom_skills.split(",") if s.strip()]

    # Always auto-generate cover letter
    cover_letter_text = auto_cover_letter(name, position, experiences)

    skills_list = "".join([f"<li>{s}</li>" for s in all_skills])
    exp_list = "".join([f"<li>{e.strip()}</li>" for e in experiences.split("\n") if e.strip()])
    edu_list = "".join([f"<li>{e.strip()}</li>" for e in education.split("\n") if e.strip()])

    # Recipient defaults
    recipient_name = recipient_name.strip() or "Hiring Committee"
    recipient_email = recipient_email.strip() or "N/A"

    # HTML Resume
    html_resume = f"""
    <html>
    <head>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
            color:#333;
            line-height:1.6;
        }}
        h1 {{
            color: white;
            background-color: #4a90e2;
            padding: 10px;
            text-align: center;
        }}
        h2 {{
            color: #4a90e2;
            border-bottom: 1px solid #ccc;
            padding-bottom: 5px;
        }}
        ul {{
            list-style-type: square;
            padding-left: 20px;
        }}
        .section {{
            margin-bottom: 20px;
        }}
        @media (max-width: 600px) {{
            body {{ font-size: 14px; }}
            h1 {{ font-size: 18px; }}
        }}
    </style>
    </head>
    <body>
        <h1>{name}</h1>
        <p><b>Position Applied For:</b> {position}</p>
        <p><b>Phone:</b> {phone} | <b>Email:</b> {email}</p>
        <div class="section">
            <h2>Summary</h2>
            <p>Position applying for <b>{position}</b> with strong experience and skills.</p>
        </div>
        <div class="section">
            <h2>Cover Letter</h2>
            <p>{cover_letter_text.replace("\n","<br>")}</p>
        </div>
        <div class="section">
            <h2>Skills</h2>
            <ul>{skills_list}</ul>
        </div>
        <div class="section">
            <h2>Experience</h2>
            <ul>{exp_list}</ul>
        </div>
        <div class="section">
            <h2>Education</h2>
            <ul>{edu_list}</ul>
        </div>
        <p><i>Generated on {date_str}</i></p>
    </body>
    </html>
    """

    # Email body
    email_lines = [
        f"Dear {recipient_name},",
        "",
        f"I am writing to apply for the position of **{position}**.",
        "",
        f"Please find attached my resume for your consideration.",
        "",
        '"I do not want to miss an opportunity to hear your thoughts on this job."',
        "",
        "Sincerely,",
        f"{name}",
        f"Phone: {phone}",
        f"Email: {email}"
    ]
    email_body = "\n".join(email_lines)
    subject = f"Application for {position}"

    email_md = f"### Subject\n{subject}\n\n### To\n{recipient_name} <{recipient_email}>\n\n### Body\n{email_body}"

    # Generate PDF file
    tmp_pdf = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    doc = SimpleDocTemplate(tmp_pdf.name, pagesize=letter)
    styles = getSampleStyleSheet()

    story = []
    story.append(Paragraph(f"<b>{name}</b>", styles["Title"]))
    story.append(Spacer(1, 0.2 * inch))
    story.append(Paragraph(f"Position Applied For: {position}", styles["Normal"]))
    story.append(Paragraph(f"Phone: {phone} | Email: {email}", styles["Normal"]))
    story.append(Spacer(1, 0.2 * inch))
    story.append(Paragraph("Cover Letter", styles["Heading2"]))
    story.append(Paragraph(cover_letter_text, styles["Normal"]))
    story.append(Spacer(1, 0.2 * inch))
    story.append(Paragraph("Skills", styles["Heading2"]))
    story.append(ListFlowable([ListItem(Paragraph(s, styles["Normal"])) for s in all_skills]))
    story.append(Spacer(1, 0.2 * inch))
    story.append(Paragraph("Experience", styles["Heading2"]))
    story.append(ListFlowable([ListItem(Paragraph(e, styles["Normal"])) for e in experiences.split("\n") if e.strip()]))
    story.append(Spacer(1, 0.2 * inch))
    story.append(Paragraph("Education", styles["Heading2"]))
    story.append(ListFlowable([ListItem(Paragraph(e, styles["Normal"])) for e in education.split("\n") if e.strip()]))
    story.append(Spacer(1, 0.3 * inch))
    story.append(Paragraph(f"Generated on {date_str}", styles["Italic"]))

    doc.build(story)
    tmp_pdf.close()

    return html_resume, email_md, tmp_pdf.name


# Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("## Creative Resume + Email Generator (Auto Cover Letter)")

    with gr.Row():
        with gr.Column():
            name = gr.Textbox(label="Your Name")
            phone = gr.Textbox(label="Phone Number")
            email = gr.Textbox(label="Your Email")
            position = gr.Dropdown(
                ["Software Engineer", "Data Scientist", "Teacher", "Researcher", "Intern", "Other"],
                label="Position Applied For"
            )
            skills_selected = gr.CheckboxGroup(
                ["Python", "C++", "Java", "Machine Learning", "Deep Learning", "Data Analysis",
                 "Project Management", "Communication", "Leadership", "Problem Solving", "Teamwork"],
                label="Select Your Skills"
            )
            custom_skills = gr.Textbox(label="Add Custom Skills (comma separated)")
            experiences = gr.Textbox(label="Experience (one per line)", lines=4)
            education = gr.Textbox(label="Education (one per line)", lines=3)
        with gr.Column():
            recipient_name = gr.Textbox(label="Recipient Name (optional)")
            recipient_email = gr.Textbox(label="Recipient Email (optional)")

    btn = gr.Button("Generate Resume + Email")
    resume_out = gr.HTML(label="Resume Preview")
    email_out = gr.Markdown(label="Generated Email")
    pdf_out = gr.File(label="Download Resume PDF")

    btn.click(
        generate_resume_email,
        inputs=[name, phone, email, position, skills_selected, custom_skills,
                experiences, education, recipient_name, recipient_email],
        outputs=[resume_out, email_out, pdf_out]
    )

demo.launch(share=True)